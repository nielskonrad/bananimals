@import 'base/variables';
@import 'base/mixins';
@import 'base/draganddrop';

html, body, .container { width: 100%; height: 100%; margin: 0; padding: 0; }

#link-container {
  position: absolute;
  top: 64px;
  width: 300px;
  left: calc(50% - 150px);
  z-index: 1;
  a {
    text-decoration: none;
  }
}

body {
  // background: $color-background;
  color: $color-text;
  font-family: monospace;
  font-size: 18px;
  margin: 0;
  // background: #70a5da;
  // background: linear-gradient(141deg, #0fb8ad 0%, #1fc8db 51%, #2cb5e8 75%);
  @include placeContentInMiddle();
  background: #FFF;
}

#drag-container {
  position: absolute;
  width: 10vw;
  height: 10vh;
  top: 0;
  left: 0;
  padding: 1em;
  // z-index: 1000000;
  .button-reg-one {
    width: calc(100% - .5em);
    height: calc(100% - .5em);
    background: #69BBE7; /* For browsers that do not support gradients */
    background: -webkit-linear-gradient(-90deg, #69BBE7, #70CDDF); /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient(-90deg, #69BBE7, #70CDDF); /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient(-90deg, #69BBE7, #70CDDF); /* For Firefox 3.6 to 15 */
    background: linear-gradient(-90deg, #69BBE7, #70CDDF); /* Standard syntax */
    
  }
}

/*.shp1, .shp2, .shp3 {opacity: 0.2;}*/
.shp1, .shp2 {fill: rgba(255, 255, 255, 1);}
.shp3 {fill: rgba(255, 255, 255, 0.4);}
.shp1 {width: 20px;}
.shp2, .shp3 {display: none;}

.banana-wrapper {
  position: absolute;
  width: 100px;
  height: 100px;
  right: 50px;
  top: 50px;
  cursor: pointer;
}

.eat-shape {
  position: absolute;
  background: #ff4cff;
  padding: 1em;
  width: auto;
  height: auto;
  border-radius: 200px; 
  .eat-text {
    // left: 50%;
    // top: 50%;
  }
}

#tucan-body-wrapper {
  position: absolute;
  width: 50%;
  left: 25%;
  // left: calc(100vw / 4);
  // top: calc(100vh / 4);
}

#beak_top {
  cursor: pointer;
}

// #beak_bot, #beak_top {
//   opacity: 0;
// }

// .banana {
//   fill: none;
//   stroke:#F8FFC5;
//   stroke-width: 8;
//   stroke-linecap: round;
//   stroke-miterlimit: 10;
//   cursor: pointer;
// }

// .container {
// 	margin: 3em auto;
//   display: inline-block;
// 	position: relative;
// 	width: 100%;
// }

#o_shape {
  opacity: 0;
}

#tongue_long, #slurp-2, #slurp-3, {
  opacity: 0;
}

.container svg {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

.container {
  // margin: 0 auto;
  width: 80%;
  height: 80vh;
  position: relative;
  @include placeContentInMiddle();
  img {
    display: block;
    width: 100%;
  }
  input[type=checkbox] {
    display: none;
  }
  label {
    cursor: pointer;
    display: inline-block;
    margin-right: 1em;
    padding: 0.4em 0;
  }
  input[type=checkbox] + label:before {
    background: $color-text;
    content: '';
    display: inline-block;
    height: 16px;
    margin-right: 8px;
    position: relative;
    top: 1px;
    width: 16px;
  }
  
  input[type=checkbox]:checked + label:before {
    background: $color-green;
  }
  .container--offset {
    margin-left: 0;
  }
  button {
    background: $color-text;
    border: 10px solid $color-green;
    cursor: pointer;
    display: block;
    font-family: monospace;
    font-size: 24px;
    height: 80px;
    line-height: 60px;
    margin: 0;
    outline: none;
    padding: 0 1.2em;
    text-align: right;
    &:hover {
      background: $color-green;
    }
    &#deleteme {
      margin: 2rem;
    }
  }
  .scene {
    margin: 0;
    padding: 0;
    position: relative;
    button {
      left: 10%;
      top: 260px;
      width: 80%;
      position: absolute;
    }
  }
  .fill {
    bottom: 5%;
    left: 5%;
    position: absolute;
    right: 5%;
    top: 5%;
  }
  .expand-width {
    width: 100%;
  }
  .border {
    border: 2px dashed $color-green;
  }
  .aspect {
    opacity: 0.2;
  }
  .shape {
    // position: relative;
  }
  @for $i from 1 through 6 {
    .scene > *:nth-child(#{$i}) {
      position: relative;
      width: 500px;
      height: 500px;
      background: rgba(180, 0, 0, 0.1 * $i);
      opacity: #{0.15 * $i};
      button {
        transform: rotate(#{180 - 30 * $i}deg)
      }
    }
  }
}
